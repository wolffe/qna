<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_File_Model_Base_Token extends SabaiFramework_Model_Entity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Token', $model);
        $this->_vars = array('token_hash' => null, 'token_form_build_id' => null, 'token_form_field_name' => null, 'token_expires' => 0, 'token_settings' => null, 'token_file_count' => 0, 'token_id' => 0, 'token_created' => 0, 'token_updated' => 0, 'token_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('token_id' => 0, 'token_created' => 0, 'token_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return 'Token:' . $this->__get('id');
    }

    protected function _assignUser($user, $markDirty = true)
    {
        $this->_setVar('token_user_id', $user->id, $markDirty);
    }

    protected function _fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->UserIdentity($this->_vars['token_user_id']);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function addFile(Sabai_Addon_File_Model_File $entity)
    {
        $entity->Token = $this;

        return $this;
    }

    public function removeFile(Sabai_Addon_File_Model_File $entity)
    {
        $this->removeFileById($entity->id);

        return $this;
    }

    public function removeFileById($id)
    {
        $this->_removeEntityById('file_id', 'File', $id);

        return $this;
    }

    public function createFile()
    {
        return $this->_createEntity('File');
    }

    public function removeFiles()
    {
        $this->_removeEntities('File');

        return $this;
    }

    public function __get($name)
    {
        if ($name === 'hash')
            return $this->_vars['token_hash'];
        elseif ($name === 'form_build_id')
            return $this->_vars['token_form_build_id'];
        elseif ($name === 'form_field_name')
            return $this->_vars['token_form_field_name'];
        elseif ($name === 'expires')
            return $this->_vars['token_expires'];
        elseif ($name === 'settings')
            return $this->_vars['token_settings'];
        elseif ($name === 'file_count')
            return $this->_vars['token_file_count'];
        elseif ($name === 'id')
            return $this->_vars['token_id'];
        elseif ($name === 'created')
            return $this->_vars['token_created'];
        elseif ($name === 'updated')
            return $this->_vars['token_updated'];
        elseif ($name === 'user_id')
            return $this->_vars['token_user_id'];
        elseif ($name === 'Files')
            return $this->_fetchEntities('File', 'Files');
        elseif ($name === 'User')
            return $this->_fetchUser();
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'hash')
            $this->_setVar('token_hash', $value);
        elseif ($name === 'form_build_id')
            $this->_setVar('token_form_build_id', $value);
        elseif ($name === 'form_field_name')
            $this->_setVar('token_form_field_name', $value);
        elseif ($name === 'expires')
            $this->_setVar('token_expires', $value);
        elseif ($name === 'settings')
            $this->_setVar('token_settings', $value);
        elseif ($name === 'file_count')
            $this->_setVar('token_file_count', $value);
        elseif ($name === 'id')
            $this->_setVar('token_id', $value);
        elseif ($name === 'user_id')
            $this->_setVar('token_user_id', $value);
        elseif ($name === 'User')
            $this->_assignUser($value);
        elseif ($name === 'Files') {
            $this->removeFiles();
            foreach (array_keys($value) as $i) $this->addFile($value[$i]);
        }
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'token_expires')
            $this->_vars['token_expires'] = (int)$value;
        elseif ($name === 'token_settings')
            $this->_vars['token_settings'] = @unserialize($value);
        elseif ($name === 'token_file_count')
            $this->_vars['token_file_count'] = (int)$value;
        elseif ($name === 'token_id')
            $this->_vars['token_id'] = (int)$value;
        elseif ($name === 'token_created')
            $this->_vars['token_created'] = (int)$value;
        elseif ($name === 'token_updated')
            $this->_vars['token_updated'] = (int)$value;
        elseif ($name === 'token_user_id')
            $this->_vars['token_user_id'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_File_Model_Base_TokenRepository extends SabaiFramework_Model_EntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Token', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('token_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('token_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('token_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('token_user_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_File_Model_Base_TokensByRowset($rs, $this->_model->create('Token'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_File_Model_Base_Tokens($this->_model, $entities);
    }
}

class Sabai_Addon_File_Model_Base_TokensByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_File_Model_Token $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('Tokens', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Sabai_Addon_File_Model_Base_Tokens extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Tokens', $entities);
    }
}