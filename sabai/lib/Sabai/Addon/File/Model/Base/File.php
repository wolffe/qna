<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_File_Model_Base_File extends SabaiFramework_Model_Entity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('File', $model);
        $this->_vars = array('file_name' => null, 'file_title' => null, 'file_type' => null, 'file_size' => 0, 'file_extension' => null, 'file_hash' => null, 'file_is_image' => 0, 'file_width' => 0, 'file_height' => 0, 'file_id' => 0, 'file_created' => 0, 'file_updated' => 0, 'file_token_id' => 0, 'file_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('file_id' => 0, 'file_created' => 0, 'file_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return $this->__get('name');
    }

    protected function _assignUser($user, $markDirty = true)
    {
        $this->_setVar('file_user_id', $user->id, $markDirty);
    }

    protected function _fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->UserIdentity($this->_vars['file_user_id']);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function __get($name)
    {
        if ($name === 'name')
            return $this->_vars['file_name'];
        elseif ($name === 'title')
            return $this->_vars['file_title'];
        elseif ($name === 'type')
            return $this->_vars['file_type'];
        elseif ($name === 'size')
            return $this->_vars['file_size'];
        elseif ($name === 'extension')
            return $this->_vars['file_extension'];
        elseif ($name === 'hash')
            return $this->_vars['file_hash'];
        elseif ($name === 'is_image')
            return $this->_vars['file_is_image'];
        elseif ($name === 'width')
            return $this->_vars['file_width'];
        elseif ($name === 'height')
            return $this->_vars['file_height'];
        elseif ($name === 'id')
            return $this->_vars['file_id'];
        elseif ($name === 'created')
            return $this->_vars['file_created'];
        elseif ($name === 'updated')
            return $this->_vars['file_updated'];
        elseif ($name === 'token_id')
            return $this->_vars['file_token_id'];
        elseif ($name === 'user_id')
            return $this->_vars['file_user_id'];
        elseif ($name === 'Token')
            return $this->_fetchEntity('Token', 'token_id');
        elseif ($name === 'User')
            return $this->_fetchUser();
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'name')
            $this->_setVar('file_name', $value);
        elseif ($name === 'title')
            $this->_setVar('file_title', $value);
        elseif ($name === 'type')
            $this->_setVar('file_type', $value);
        elseif ($name === 'size')
            $this->_setVar('file_size', $value);
        elseif ($name === 'extension')
            $this->_setVar('file_extension', $value);
        elseif ($name === 'hash')
            $this->_setVar('file_hash', $value);
        elseif ($name === 'is_image')
            $this->_setVar('file_is_image', $value);
        elseif ($name === 'width')
            $this->_setVar('file_width', $value);
        elseif ($name === 'height')
            $this->_setVar('file_height', $value);
        elseif ($name === 'id')
            $this->_setVar('file_id', $value);
        elseif ($name === 'user_id')
            $this->_setVar('file_user_id', $value);
        elseif ($name === 'User')
            $this->_assignUser($value);
        elseif ($name === 'token_id')
            $this->_assignEntityById('Token', $value, 'file_token_id');
        elseif ($name === 'Token') {
            $_value = is_array($value) ? $value[0] : $value;
            if (is_object($_value)) {
                $this->_assignEntity($_value, 'file_token_id');
            } else {
                $this->_assignEntityById('Token', $_value, 'file_token_id');
            }
        }
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'file_size')
            $this->_vars['file_size'] = (int)$value;
        elseif ($name === 'file_is_image')
            $this->_vars['file_is_image'] = (int)$value;
        elseif ($name === 'file_width')
            $this->_vars['file_width'] = (int)$value;
        elseif ($name === 'file_height')
            $this->_vars['file_height'] = (int)$value;
        elseif ($name === 'file_id')
            $this->_vars['file_id'] = (int)$value;
        elseif ($name === 'file_created')
            $this->_vars['file_created'] = (int)$value;
        elseif ($name === 'file_updated')
            $this->_vars['file_updated'] = (int)$value;
        elseif ($name === 'file_token_id')
            $this->_vars['file_token_id'] = (int)$value;
        elseif ($name === 'file_user_id')
            $this->_vars['file_user_id'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_File_Model_Base_FileRepository extends SabaiFramework_Model_EntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('File', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('file_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('file_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('file_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('file_user_id', $id, $criteria);
    }

    public function fetchByToken($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('file_token_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByToken($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Token', $id, $perpage, $sort, $order);
    }

    public function countByToken($id)
    {
        return $this->_countByForeign('file_token_id', $id);
    }

    public function fetchByTokenAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('file_token_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByTokenAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Token', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByTokenAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('file_token_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_File_Model_Base_FilesByRowset($rs, $this->_model->create('File'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_File_Model_Base_Files($this->_model, $entities);
    }
}

class Sabai_Addon_File_Model_Base_FilesByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_File_Model_File $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('Files', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Sabai_Addon_File_Model_Base_Files extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Files', $entities);
    }
}