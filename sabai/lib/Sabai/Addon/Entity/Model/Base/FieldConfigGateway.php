<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Entity_Model_Base_FieldConfigGateway extends SabaiFramework_Model_Gateway
{
    public function getName()
    {
        return 'entity_fieldconfig';
    }

    public function getFields()
    {
        return array('fieldconfig_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldconfig_type' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldconfig_storage' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldconfig_system' => SabaiFramework_Model::KEY_TYPE_INT, 'fieldconfig_settings' => SabaiFramework_Model::KEY_TYPE_TEXT, 'fieldconfig_property' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldconfig_schema' => SabaiFramework_Model::KEY_TYPE_TEXT, 'fieldconfig_entitytype_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'fieldconfig_id' => SabaiFramework_Model::KEY_TYPE_INT, 'fieldconfig_created' => SabaiFramework_Model::KEY_TYPE_INT, 'fieldconfig_updated' => SabaiFramework_Model::KEY_TYPE_INT, 'fieldconfig_bundle_id' => SabaiFramework_Model::KEY_TYPE_INT);
    }

    protected function _getIdFieldName()
    {
        return 'fieldconfig_id';
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_fieldconfig WHERE fieldconfig_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_fieldconfig WHERE fieldconfig_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(', ', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sentity_fieldconfig entity_fieldconfig WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery(&$values)
    {
        $values['fieldconfig_created'] = time();
        $values['fieldconfig_updated'] = 0;
        return sprintf('INSERT INTO %sentity_fieldconfig(fieldconfig_name, fieldconfig_type, fieldconfig_storage, fieldconfig_system, fieldconfig_settings, fieldconfig_property, fieldconfig_schema, fieldconfig_entitytype_name, fieldconfig_id, fieldconfig_created, fieldconfig_updated, fieldconfig_bundle_id) VALUES(%s, %s, %s, %d, %s, %s, %s, %s, %s, %d, %d, %d)', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['fieldconfig_name']), $this->_db->escapeString($values['fieldconfig_type']), $this->_db->escapeString($values['fieldconfig_storage']), $values['fieldconfig_system'], $this->_db->escapeString(serialize($values['fieldconfig_settings'])), $this->_db->escapeString($values['fieldconfig_property']), $this->_db->escapeString(serialize($values['fieldconfig_schema'])), $this->_db->escapeString($values['fieldconfig_entitytype_name']), empty($values['fieldconfig_id']) ? 'NULL' : intval($values['fieldconfig_id']), $values['fieldconfig_created'], $values['fieldconfig_updated'], $values['fieldconfig_bundle_id']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['fieldconfig_updated'];
        $values['fieldconfig_updated'] = time();
        return sprintf('UPDATE %sentity_fieldconfig SET fieldconfig_name = %s, fieldconfig_type = %s, fieldconfig_storage = %s, fieldconfig_system = %d, fieldconfig_settings = %s, fieldconfig_property = %s, fieldconfig_schema = %s, fieldconfig_entitytype_name = %s, fieldconfig_updated = %d, fieldconfig_bundle_id = %d WHERE fieldconfig_id = %d AND fieldconfig_updated = %d', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['fieldconfig_name']), $this->_db->escapeString($values['fieldconfig_type']), $this->_db->escapeString($values['fieldconfig_storage']), $values['fieldconfig_system'], $this->_db->escapeString(serialize($values['fieldconfig_settings'])), $this->_db->escapeString($values['fieldconfig_property']), $this->_db->escapeString(serialize($values['fieldconfig_schema'])), $this->_db->escapeString($values['fieldconfig_entitytype_name']), $values['fieldconfig_updated'], $values['fieldconfig_bundle_id'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sentity_fieldconfig WHERE fieldconfig_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['fieldconfig_updated'] = 'fieldconfig_updated=' . time();
        return sprintf('UPDATE %sentity_fieldconfig entity_fieldconfig SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(', ', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE entity_fieldconfig, table1, table2 FROM %1$sentity_fieldconfig entity_fieldconfig LEFT JOIN %1$sentity_field table1 ON entity_fieldconfig.fieldconfig_id = table1.field_fieldconfig_id LEFT JOIN %1$sentity_filter table2 ON table1.field_id = table2.filter_field_id WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sentity_fieldconfig entity_fieldconfig WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsert1($id, array $new)
    {
    }

    protected function _afterDelete1($id, array $old)
    {
    }

    protected function _afterUpdate1($id, array $new, array $old)
    {
    }

    protected function _beforeDelete1($id, array $old)
    {
        $this->_db->exec(sprintf('DELETE table0, table1 FROM %1$sentity_field table0 LEFT JOIN %1$sentity_filter table1 ON table0.field_id = table1.filter_field_id WHERE table0.field_fieldconfig_id = %2$d', $this->_db->getResourcePrefix(), $id));
    }

    protected function _afterInsert($id, array $new)
    {
        $this->_afterInsert1($id, $new);
    }

    protected function _afterUpdate($id, array $new, array $old)
    {
        $this->_afterUpdate1($id, $new, $old);
    }

    protected function _beforeDelete($id, array $old)
    {
        $this->_beforeDelete1($id, $old);
    }

    protected function _afterDelete($id, array $old)
    {
        $this->_afterDelete1($id, $old);
    }
}