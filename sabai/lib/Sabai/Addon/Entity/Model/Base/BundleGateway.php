<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Entity_Model_Base_BundleGateway extends SabaiFramework_Model_Gateway
{
    public function getName()
    {
        return 'entity_bundle';
    }

    public function getFields()
    {
        return array('bundle_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_path' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_type' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_addon' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_label' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_label_singular' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_info' => SabaiFramework_Model::KEY_TYPE_TEXT, 'bundle_system' => SabaiFramework_Model::KEY_TYPE_BOOL, 'bundle_entitytype_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'bundle_id' => SabaiFramework_Model::KEY_TYPE_INT, 'bundle_created' => SabaiFramework_Model::KEY_TYPE_INT, 'bundle_updated' => SabaiFramework_Model::KEY_TYPE_INT);
    }

    protected function _getIdFieldName()
    {
        return 'bundle_id';
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_bundle WHERE bundle_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_bundle WHERE bundle_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(', ', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sentity_bundle entity_bundle WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery(&$values)
    {
        $values['bundle_created'] = time();
        $values['bundle_updated'] = 0;
        return sprintf('INSERT INTO %sentity_bundle(bundle_name, bundle_path, bundle_type, bundle_addon, bundle_label, bundle_label_singular, bundle_info, bundle_system, bundle_entitytype_name, bundle_id, bundle_created, bundle_updated) VALUES(%s, %s, %s, %s, %s, %s, %s, %u, %s, %s, %d, %d)', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['bundle_name']), $this->_db->escapeString($values['bundle_path']), $this->_db->escapeString($values['bundle_type']), $this->_db->escapeString($values['bundle_addon']), $this->_db->escapeString($values['bundle_label']), $this->_db->escapeString($values['bundle_label_singular']), $this->_db->escapeString(serialize($values['bundle_info'])), $this->_db->escapeBool($values['bundle_system']), $this->_db->escapeString($values['bundle_entitytype_name']), empty($values['bundle_id']) ? 'NULL' : intval($values['bundle_id']), $values['bundle_created'], $values['bundle_updated']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['bundle_updated'];
        $values['bundle_updated'] = time();
        return sprintf('UPDATE %sentity_bundle SET bundle_name = %s, bundle_path = %s, bundle_type = %s, bundle_addon = %s, bundle_label = %s, bundle_label_singular = %s, bundle_info = %s, bundle_system = %u, bundle_entitytype_name = %s, bundle_updated = %d WHERE bundle_id = %d AND bundle_updated = %d', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['bundle_name']), $this->_db->escapeString($values['bundle_path']), $this->_db->escapeString($values['bundle_type']), $this->_db->escapeString($values['bundle_addon']), $this->_db->escapeString($values['bundle_label']), $this->_db->escapeString($values['bundle_label_singular']), $this->_db->escapeString(serialize($values['bundle_info'])), $this->_db->escapeBool($values['bundle_system']), $this->_db->escapeString($values['bundle_entitytype_name']), $values['bundle_updated'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sentity_bundle WHERE bundle_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['bundle_updated'] = 'bundle_updated=' . time();
        return sprintf('UPDATE %sentity_bundle entity_bundle SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(', ', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE entity_bundle, table1, table2, table3, table4 FROM %1$sentity_bundle entity_bundle LEFT JOIN %1$sentity_field table1 ON entity_bundle.bundle_id = table1.field_bundle_id LEFT JOIN %1$sentity_filter table2 ON table1.field_id = table2.filter_field_id LEFT JOIN %1$sentity_fieldcache table3 ON entity_bundle.bundle_id = table3.fieldcache_bundle_id LEFT JOIN %1$sentity_filter table4 ON entity_bundle.bundle_id = table4.filter_bundle_id WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sentity_bundle entity_bundle WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _beforeDelete1($id, array $old)
    {
        $this->_db->exec(sprintf('DELETE table0, table1 FROM %1$sentity_field table0 LEFT JOIN %1$sentity_filter table1 ON table0.field_id = table1.filter_field_id WHERE table0.field_bundle_id = %2$d', $this->_db->getResourcePrefix(), $id));
    }

    protected function _beforeDelete2($id, array $old)
    {
        $this->_db->exec(sprintf('DELETE table0 FROM %1$sentity_fieldcache table0 WHERE table0.fieldcache_bundle_id = %2$d', $this->_db->getResourcePrefix(), $id));
    }

    protected function _beforeDelete3($id, array $old)
    {
        $this->_db->exec(sprintf('DELETE table0 FROM %1$sentity_filter table0 WHERE table0.filter_bundle_id = %2$d', $this->_db->getResourcePrefix(), $id));
    }

    protected function _beforeDelete($id, array $old)
    {
        $this->_beforeDelete1($id, $old);
        $this->_beforeDelete2($id, $old);
        $this->_beforeDelete3($id, $old);
    }
}