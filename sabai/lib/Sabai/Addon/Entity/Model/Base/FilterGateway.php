<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Entity_Model_Base_FilterGateway extends SabaiFramework_Model_Gateway
{
    public function getName()
    {
        return 'entity_filter';
    }

    public function getFields()
    {
        return array('filter_name' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'filter_type' => SabaiFramework_Model::KEY_TYPE_VARCHAR, 'filter_data' => SabaiFramework_Model::KEY_TYPE_TEXT, 'filter_id' => SabaiFramework_Model::KEY_TYPE_INT, 'filter_created' => SabaiFramework_Model::KEY_TYPE_INT, 'filter_updated' => SabaiFramework_Model::KEY_TYPE_INT, 'filter_bundle_id' => SabaiFramework_Model::KEY_TYPE_INT, 'filter_field_id' => SabaiFramework_Model::KEY_TYPE_INT);
    }

    protected function _getIdFieldName()
    {
        return 'filter_id';
    }

    protected function _getSelectByIdQuery($id, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_filter WHERE filter_id = %d',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $id
        );
    }

    protected function _getSelectByIdsQuery($ids, $fields)
    {
        return sprintf(
            'SELECT %s FROM %sentity_filter WHERE filter_id IN (%s)',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            implode(', ', array_map('intval', $ids))
        );
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, $fields)
    {
        return sprintf(
            'SELECT %1$s FROM %2$sentity_filter entity_filter WHERE %3$s',
            empty($fields) ? '*' : implode(', ', $fields),
            $this->_db->getResourcePrefix(),
            $criteriaStr
        );
    }

    protected function _getInsertQuery(&$values)
    {
        $values['filter_created'] = time();
        $values['filter_updated'] = 0;
        return sprintf('INSERT INTO %sentity_filter(filter_name, filter_type, filter_data, filter_id, filter_created, filter_updated, filter_bundle_id, filter_field_id) VALUES(%s, %s, %s, %s, %d, %d, %d, %d)', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['filter_name']), $this->_db->escapeString($values['filter_type']), $this->_db->escapeString(serialize($values['filter_data'])), empty($values['filter_id']) ? 'NULL' : intval($values['filter_id']), $values['filter_created'], $values['filter_updated'], $values['filter_bundle_id'], $values['filter_field_id']);
    }

    protected function _getUpdateQuery($id, $values)
    {
        $last_update = $values['filter_updated'];
        $values['filter_updated'] = time();
        return sprintf('UPDATE %sentity_filter SET filter_name = %s, filter_type = %s, filter_data = %s, filter_updated = %d, filter_bundle_id = %d, filter_field_id = %d WHERE filter_id = %d AND filter_updated = %d', $this->_db->getResourcePrefix(), $this->_db->escapeString($values['filter_name']), $this->_db->escapeString($values['filter_type']), $this->_db->escapeString(serialize($values['filter_data'])), $values['filter_updated'], $values['filter_bundle_id'], $values['filter_field_id'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sentity_filter WHERE filter_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, $sets)
    {
        $sets['filter_updated'] = 'filter_updated=' . time();
        return sprintf('UPDATE %sentity_filter entity_filter SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(', ', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE entity_filter FROM %1$sentity_filter entity_filter WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sentity_filter entity_filter WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsert1($id, array $new)
    {
    }

    protected function _afterDelete1($id, array $old)
    {
    }

    protected function _afterUpdate1($id, array $new, array $old)
    {
    }

    protected function _afterInsert($id, array $new)
    {
        $this->_afterInsert1($id, $new);
    }

    protected function _afterUpdate($id, array $new, array $old)
    {
        $this->_afterUpdate1($id, $new, $old);
    }

    protected function _afterDelete($id, array $old)
    {
        $this->_afterDelete1($id, $old);
    }
}