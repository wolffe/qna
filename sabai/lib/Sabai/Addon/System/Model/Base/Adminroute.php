<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_System_Model_Base_Adminroute extends SabaiFramework_Model_Entity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Adminroute', $model);
        $this->_vars = array('adminroute_path' => null, 'adminroute_method' => null, 'adminroute_format' => null, 'adminroute_controller' => null, 'adminroute_controller_addon' => null, 'adminroute_forward' => null, 'adminroute_addon' => null, 'adminroute_type' => 0, 'adminroute_class' => null, 'adminroute_access_callback' => false, 'adminroute_title_callback' => false, 'adminroute_callback_path' => null, 'adminroute_callback_addon' => null, 'adminroute_title' => null, 'adminroute_description' => null, 'adminroute_weight' => 0, 'adminroute_depth' => 0, 'adminroute_ajax' => 0, 'adminroute_priority' => 5, 'adminroute_data' => null, 'adminroute_id' => 0, 'adminroute_created' => 0, 'adminroute_updated' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('adminroute_id' => 0, 'adminroute_created' => 0, 'adminroute_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return $this->__get('path');
    }

    public function __get($name)
    {
        if ($name === 'path')
            return $this->_vars['adminroute_path'];
        elseif ($name === 'method')
            return $this->_vars['adminroute_method'];
        elseif ($name === 'format')
            return $this->_vars['adminroute_format'];
        elseif ($name === 'controller')
            return $this->_vars['adminroute_controller'];
        elseif ($name === 'controller_addon')
            return $this->_vars['adminroute_controller_addon'];
        elseif ($name === 'forward')
            return $this->_vars['adminroute_forward'];
        elseif ($name === 'addon')
            return $this->_vars['adminroute_addon'];
        elseif ($name === 'type')
            return $this->_vars['adminroute_type'];
        elseif ($name === 'class')
            return $this->_vars['adminroute_class'];
        elseif ($name === 'access_callback')
            return $this->_vars['adminroute_access_callback'];
        elseif ($name === 'title_callback')
            return $this->_vars['adminroute_title_callback'];
        elseif ($name === 'callback_path')
            return $this->_vars['adminroute_callback_path'];
        elseif ($name === 'callback_addon')
            return $this->_vars['adminroute_callback_addon'];
        elseif ($name === 'title')
            return $this->_vars['adminroute_title'];
        elseif ($name === 'description')
            return $this->_vars['adminroute_description'];
        elseif ($name === 'weight')
            return $this->_vars['adminroute_weight'];
        elseif ($name === 'depth')
            return $this->_vars['adminroute_depth'];
        elseif ($name === 'ajax')
            return $this->_vars['adminroute_ajax'];
        elseif ($name === 'priority')
            return $this->_vars['adminroute_priority'];
        elseif ($name === 'data')
            return $this->_vars['adminroute_data'];
        elseif ($name === 'id')
            return $this->_vars['adminroute_id'];
        elseif ($name === 'created')
            return $this->_vars['adminroute_created'];
        elseif ($name === 'updated')
            return $this->_vars['adminroute_updated'];
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'path')
            $this->_setVar('adminroute_path', $value);
        elseif ($name === 'method')
            $this->_setVar('adminroute_method', $value);
        elseif ($name === 'format')
            $this->_setVar('adminroute_format', $value);
        elseif ($name === 'controller')
            $this->_setVar('adminroute_controller', $value);
        elseif ($name === 'controller_addon')
            $this->_setVar('adminroute_controller_addon', $value);
        elseif ($name === 'forward')
            $this->_setVar('adminroute_forward', $value);
        elseif ($name === 'addon')
            $this->_setVar('adminroute_addon', $value);
        elseif ($name === 'type')
            $this->_setVar('adminroute_type', $value);
        elseif ($name === 'class')
            $this->_setVar('adminroute_class', $value);
        elseif ($name === 'access_callback')
            $this->_setVar('adminroute_access_callback', $value);
        elseif ($name === 'title_callback')
            $this->_setVar('adminroute_title_callback', $value);
        elseif ($name === 'callback_path')
            $this->_setVar('adminroute_callback_path', $value);
        elseif ($name === 'callback_addon')
            $this->_setVar('adminroute_callback_addon', $value);
        elseif ($name === 'title')
            $this->_setVar('adminroute_title', $value);
        elseif ($name === 'description')
            $this->_setVar('adminroute_description', $value);
        elseif ($name === 'weight')
            $this->_setVar('adminroute_weight', $value);
        elseif ($name === 'depth')
            $this->_setVar('adminroute_depth', $value);
        elseif ($name === 'ajax')
            $this->_setVar('adminroute_ajax', $value);
        elseif ($name === 'priority')
            $this->_setVar('adminroute_priority', $value);
        elseif ($name === 'data')
            $this->_setVar('adminroute_data', $value);
        elseif ($name === 'id')
            $this->_setVar('adminroute_id', $value);
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'adminroute_format')
            $this->_vars['adminroute_format'] = @unserialize($value);
        elseif ($name === 'adminroute_type')
            $this->_vars['adminroute_type'] = (int)$value;
        elseif ($name === 'adminroute_access_callback')
            $this->_vars['adminroute_access_callback'] = (bool)$value;
        elseif ($name === 'adminroute_title_callback')
            $this->_vars['adminroute_title_callback'] = (bool)$value;
        elseif ($name === 'adminroute_weight')
            $this->_vars['adminroute_weight'] = (int)$value;
        elseif ($name === 'adminroute_depth')
            $this->_vars['adminroute_depth'] = (int)$value;
        elseif ($name === 'adminroute_ajax')
            $this->_vars['adminroute_ajax'] = (int)$value;
        elseif ($name === 'adminroute_priority')
            $this->_vars['adminroute_priority'] = (int)$value;
        elseif ($name === 'adminroute_data')
            $this->_vars['adminroute_data'] = @unserialize($value);
        elseif ($name === 'adminroute_id')
            $this->_vars['adminroute_id'] = (int)$value;
        elseif ($name === 'adminroute_created')
            $this->_vars['adminroute_created'] = (int)$value;
        elseif ($name === 'adminroute_updated')
            $this->_vars['adminroute_updated'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_System_Model_Base_AdminrouteRepository extends SabaiFramework_Model_EntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Adminroute', $model);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_System_Model_Base_AdminroutesByRowset($rs, $this->_model->create('Adminroute'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_System_Model_Base_Adminroutes($this->_model, $entities);
    }
}

class Sabai_Addon_System_Model_Base_AdminroutesByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_System_Model_Adminroute $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('Adminroutes', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Sabai_Addon_System_Model_Base_Adminroutes extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Adminroutes', $entities);
    }
}