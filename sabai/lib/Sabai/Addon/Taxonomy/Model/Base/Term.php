<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Taxonomy_Model_Base_Term extends SabaiFramework_Model_TreeEntity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Term', $model);
        $this->_vars = array('term_name' => null, 'term_title' => null, 'term_entity_bundle_name' => null, 'term_entity_bundle_type' => null, 'term_id' => 0, 'term_created' => 0, 'term_updated' => 0, 'term_parent' => 0, 'term_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('term_id' => 0, 'term_created' => 0, 'term_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return $this->__get('name');
    }

    protected function _assignUser($user, $markDirty = true)
    {
        $this->_setVar('term_user_id', $user->id, $markDirty);
    }

    protected function _fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->UserIdentity($this->_vars['term_user_id']);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function __get($name)
    {
        if ($name === 'name')
            return $this->_vars['term_name'];
        elseif ($name === 'title')
            return $this->_vars['term_title'];
        elseif ($name === 'entity_bundle_name')
            return $this->_vars['term_entity_bundle_name'];
        elseif ($name === 'entity_bundle_type')
            return $this->_vars['term_entity_bundle_type'];
        elseif ($name === 'id')
            return $this->_vars['term_id'];
        elseif ($name === 'created')
            return $this->_vars['term_created'];
        elseif ($name === 'updated')
            return $this->_vars['term_updated'];
        elseif ($name === 'parent')
            return $this->_vars['term_parent'];
        elseif ($name === 'user_id')
            return $this->_vars['term_user_id'];
        elseif ($name === 'Parent')
            return $this->_fetchEntity('Term', 'parent');
        elseif ($name === 'User')
            return $this->_fetchUser();
        elseif ($name === 'Children')
            return $this->_fetchChildren();
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'name')
            $this->_setVar('term_name', $value);
        elseif ($name === 'title')
            $this->_setVar('term_title', $value);
        elseif ($name === 'entity_bundle_name')
            $this->_setVar('term_entity_bundle_name', $value);
        elseif ($name === 'entity_bundle_type')
            $this->_setVar('term_entity_bundle_type', $value);
        elseif ($name === 'id')
            $this->_setVar('term_id', $value);
        elseif ($name === 'user_id')
            $this->_setVar('term_user_id', $value);
        elseif ($name === 'User')
            $this->_assignUser($value);
        elseif ($name === 'parent')
            $this->_assignEntityById('Term', $value, 'term_parent');
        elseif ($name === 'Parent') {
            $_value = is_array($value) ? $value[0] : $value;
            if (is_object($_value)) {
                $this->_assignEntity($_value, 'term_parent');
            } else {
                $this->_assignEntityById('Term', $_value, 'term_parent');
            }
        }
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'term_id')
            $this->_vars['term_id'] = (int)$value;
        elseif ($name === 'term_created')
            $this->_vars['term_created'] = (int)$value;
        elseif ($name === 'term_updated')
            $this->_vars['term_updated'] = (int)$value;
        elseif ($name === 'term_parent')
            $this->_vars['term_parent'] = (int)$value;
        elseif ($name === 'term_user_id')
            $this->_vars['term_user_id'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_Taxonomy_Model_Base_TermRepository extends SabaiFramework_Model_TreeEntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Term', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('term_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('term_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('term_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('term_user_id', $id, $criteria);
    }

    public function fetchByParent($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('term_parent', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByParent($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Parent', $id, $perpage, $sort, $order);
    }

    public function countByParent($id)
    {
        return $this->_countByForeign('term_parent', $id);
    }

    public function fetchByParentAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('term_parent', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByParentAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Parent', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByParentAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('term_parent', $id, $criteria);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_Taxonomy_Model_Base_TermsByRowset($rs, $this->_model->create('Term'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_Taxonomy_Model_Base_Terms($this->_model, $entities);
    }
}

class Sabai_Addon_Taxonomy_Model_Base_TermsByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_Taxonomy_Model_Term $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('Terms', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
        if (isset($row['path_length'])) $entity->setParentsCount($row['path_length']);
    }
}

class Sabai_Addon_Taxonomy_Model_Base_Terms extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Terms', $entities);
    }
}