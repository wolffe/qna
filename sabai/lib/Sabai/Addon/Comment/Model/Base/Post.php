<?php
/* This file has been auto-generated. Do not edit this file directly. */

abstract class Sabai_Addon_Comment_Model_Base_Post extends SabaiFramework_Model_Entity
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Post', $model);
        $this->_vars = array('post_body' => null, 'post_body_html' => null, 'post_entity_id' => 0, 'post_entity_bundle_id' => 0, 'post_published_at' => 0, 'post_status' => 0, 'post_vote_sum' => 0, 'post_vote_count' => 0, 'post_flag_sum' => 0, 'post_flag_count' => 0, 'post_edit_count' => 0, 'post_edit_last_at' => 0, 'post_edit_last_by' => 0, 'post_edit_last_reason' => null, 'post_hidden_at' => 0, 'post_hidden_by' => 0, 'post_vote_disabled' => false, 'post_flag_disabled' => false, 'post_id' => 0, 'post_created' => 0, 'post_updated' => 0, 'post_user_id' => 0);
    }

    public function __clone()
    {
        $this->_vars = array('post_id' => 0, 'post_created' => 0, 'post_updated' => 0) + $this->_vars;
    }

    public function __toString()
    {
        return 'Post:' . $this->__get('id');
    }

    protected function _assignUser($user, $markDirty = true)
    {
        $this->_setVar('post_user_id', $user->id, $markDirty);
    }

    protected function _fetchUser()
    {
        if (!isset($this->_objects['User'])) {
            $this->_objects['User'] = $this->_model->UserIdentity($this->_vars['post_user_id']);
        }

        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->user_id && $this->user_id == $user->id;
    }

    public function addVote(Sabai_Addon_Comment_Model_Vote $entity)
    {
        $entity->Post = $this;

        return $this;
    }

    public function removeVote(Sabai_Addon_Comment_Model_Vote $entity)
    {
        $this->removeVoteById($entity->id);

        return $this;
    }

    public function removeVoteById($id)
    {
        $this->_removeEntityById('vote_id', 'Vote', $id);

        return $this;
    }

    public function createVote()
    {
        return $this->_createEntity('Vote');
    }

    public function removeVotes()
    {
        $this->_removeEntities('Vote');

        return $this;
    }

    public function __get($name)
    {
        if ($name === 'body')
            return $this->_vars['post_body'];
        elseif ($name === 'body_html')
            return $this->_vars['post_body_html'];
        elseif ($name === 'entity_id')
            return $this->_vars['post_entity_id'];
        elseif ($name === 'entity_bundle_id')
            return $this->_vars['post_entity_bundle_id'];
        elseif ($name === 'published_at')
            return $this->_vars['post_published_at'];
        elseif ($name === 'status')
            return $this->_vars['post_status'];
        elseif ($name === 'vote_sum')
            return $this->_vars['post_vote_sum'];
        elseif ($name === 'vote_count')
            return $this->_vars['post_vote_count'];
        elseif ($name === 'flag_sum')
            return $this->_vars['post_flag_sum'];
        elseif ($name === 'flag_count')
            return $this->_vars['post_flag_count'];
        elseif ($name === 'edit_count')
            return $this->_vars['post_edit_count'];
        elseif ($name === 'edit_last_at')
            return $this->_vars['post_edit_last_at'];
        elseif ($name === 'edit_last_by')
            return $this->_vars['post_edit_last_by'];
        elseif ($name === 'edit_last_reason')
            return $this->_vars['post_edit_last_reason'];
        elseif ($name === 'hidden_at')
            return $this->_vars['post_hidden_at'];
        elseif ($name === 'hidden_by')
            return $this->_vars['post_hidden_by'];
        elseif ($name === 'vote_disabled')
            return $this->_vars['post_vote_disabled'];
        elseif ($name === 'flag_disabled')
            return $this->_vars['post_flag_disabled'];
        elseif ($name === 'id')
            return $this->_vars['post_id'];
        elseif ($name === 'created')
            return $this->_vars['post_created'];
        elseif ($name === 'updated')
            return $this->_vars['post_updated'];
        elseif ($name === 'user_id')
            return $this->_vars['post_user_id'];
        elseif ($name === 'Votes')
            return $this->_fetchEntities('Vote', 'Votes');
        elseif ($name === 'User')
            return $this->_fetchUser();
        else
            return $this->fetchObject($name);
    }

    public function __set($name, $value)
    {
        if ($name === 'body')
            $this->_setVar('post_body', $value);
        elseif ($name === 'body_html')
            $this->_setVar('post_body_html', $value);
        elseif ($name === 'entity_id')
            $this->_setVar('post_entity_id', $value);
        elseif ($name === 'entity_bundle_id')
            $this->_setVar('post_entity_bundle_id', $value);
        elseif ($name === 'published_at')
            $this->_setVar('post_published_at', $value);
        elseif ($name === 'status')
            $this->_setVar('post_status', $value);
        elseif ($name === 'vote_sum')
            $this->_setVar('post_vote_sum', $value);
        elseif ($name === 'vote_count')
            $this->_setVar('post_vote_count', $value);
        elseif ($name === 'flag_sum')
            $this->_setVar('post_flag_sum', $value);
        elseif ($name === 'flag_count')
            $this->_setVar('post_flag_count', $value);
        elseif ($name === 'edit_count')
            $this->_setVar('post_edit_count', $value);
        elseif ($name === 'edit_last_at')
            $this->_setVar('post_edit_last_at', $value);
        elseif ($name === 'edit_last_by')
            $this->_setVar('post_edit_last_by', $value);
        elseif ($name === 'edit_last_reason')
            $this->_setVar('post_edit_last_reason', $value);
        elseif ($name === 'hidden_at')
            $this->_setVar('post_hidden_at', $value);
        elseif ($name === 'hidden_by')
            $this->_setVar('post_hidden_by', $value);
        elseif ($name === 'vote_disabled')
            $this->_setVar('post_vote_disabled', $value);
        elseif ($name === 'flag_disabled')
            $this->_setVar('post_flag_disabled', $value);
        elseif ($name === 'id')
            $this->_setVar('post_id', $value);
        elseif ($name === 'user_id')
            $this->_setVar('post_user_id', $value);
        elseif ($name === 'User')
            $this->_assignUser($value);
        elseif ($name === 'Votes') {
            $this->removeVotes();
            foreach (array_keys($value) as $i) $this->addVote($value[$i]);
        }
        else
            $this->assignObject($name, $value);
    }

    protected function _initVar($name, $value)
    {
        if ($name === 'post_entity_id')
            $this->_vars['post_entity_id'] = (int)$value;
        elseif ($name === 'post_entity_bundle_id')
            $this->_vars['post_entity_bundle_id'] = (int)$value;
        elseif ($name === 'post_published_at')
            $this->_vars['post_published_at'] = (int)$value;
        elseif ($name === 'post_status')
            $this->_vars['post_status'] = (int)$value;
        elseif ($name === 'post_vote_sum')
            $this->_vars['post_vote_sum'] = (int)$value;
        elseif ($name === 'post_vote_count')
            $this->_vars['post_vote_count'] = (int)$value;
        elseif ($name === 'post_flag_sum')
            $this->_vars['post_flag_sum'] = (int)$value;
        elseif ($name === 'post_flag_count')
            $this->_vars['post_flag_count'] = (int)$value;
        elseif ($name === 'post_edit_count')
            $this->_vars['post_edit_count'] = (int)$value;
        elseif ($name === 'post_edit_last_at')
            $this->_vars['post_edit_last_at'] = (int)$value;
        elseif ($name === 'post_edit_last_by')
            $this->_vars['post_edit_last_by'] = (int)$value;
        elseif ($name === 'post_hidden_at')
            $this->_vars['post_hidden_at'] = (int)$value;
        elseif ($name === 'post_hidden_by')
            $this->_vars['post_hidden_by'] = (int)$value;
        elseif ($name === 'post_vote_disabled')
            $this->_vars['post_vote_disabled'] = (bool)$value;
        elseif ($name === 'post_flag_disabled')
            $this->_vars['post_flag_disabled'] = (bool)$value;
        elseif ($name === 'post_id')
            $this->_vars['post_id'] = (int)$value;
        elseif ($name === 'post_created')
            $this->_vars['post_created'] = (int)$value;
        elseif ($name === 'post_updated')
            $this->_vars['post_updated'] = (int)$value;
        elseif ($name === 'post_user_id')
            $this->_vars['post_user_id'] = (int)$value;
        else
            $this->_vars[$name] = $value;
    }
}

abstract class Sabai_Addon_Comment_Model_Base_PostRepository extends SabaiFramework_Model_EntityRepository
{
    public function __construct(SabaiFramework_Model $model)
    {
        parent::__construct('Post', $model);
    }

    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('post_user_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('post_user_id', $id);
    }

    public function fetchByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('post_user_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, SabaiFramework_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, SabaiFramework_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('post_user_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(SabaiFramework_DB_Rowset $rs)
    {
        return new Sabai_Addon_Comment_Model_Base_PostsByRowset($rs, $this->_model->create('Post'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Sabai_Addon_Comment_Model_Base_Posts($this->_model, $entities);
    }
}

class Sabai_Addon_Comment_Model_Base_PostsByRowset extends SabaiFramework_Model_EntityCollection_Rowset
{
    public function __construct(SabaiFramework_DB_Rowset $rs, Sabai_Addon_Comment_Model_Post $emptyEntity, SabaiFramework_Model $model)
    {
        parent::__construct('Posts', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(SabaiFramework_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Sabai_Addon_Comment_Model_Base_Posts extends SabaiFramework_Model_EntityCollection_Array
{
    public function __construct(SabaiFramework_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Posts', $entities);
    }
}